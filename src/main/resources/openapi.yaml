openapi: 3.0.0
info:
  title: Cyrpto-Shuffle Key Exchange API
  description: This defines an API for sharing keys and key fragments.
  version: 0.1.0
  contact:
    name: Mark Grand
    email: mark.grand@hcl.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://{hostname}:{port}/v1
    variables:
      hostname:
        default: example.com
        description: The name of a host for this API.
      port:
        enum:
          - '443'
          - '8443'
        default: '443'
paths:
  /offer:
    post:
      summary: Offer to exchange a key or parts of a key for another key or parts of a key.
      description: This is an offer to exchange a key or parts of a key for another key or parts of a key. The requestor sends a public key that should already be known to the server. This serves to identify the requestor.
        
        
        The offer consists of an identiying string that identifies a context that contains an encrypted text. If the offer is to trade parts of a crypto-shuffle key, it will also include the part numbers. If there are no part numbers, then the requestor is offering the entire key.
        
        
        The response will identify what key or key parts the server is willing to trade for what has been offered. The response also serves to confirm the server's identity.
      parameters: 
        - $ref: '#/components/parameters/requestorPublicKey'
        - $ref: '#/components/parameters/encryptionAlgorithm'
        - $ref: '#/components/parameters/serverPublicKey'
        - $ref: '#/components/parameters/randomValue'
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                offer:
                    $ref: '#/components/schemas/KeyInfo'
                request:
                    $ref: '#/components/schemas/KeyInfo'
        description: This describes what keys or key parts the requestor is offering in trade for what keys or key parts from the server.
        
      responses:
        200:
          description: A description of the result.
          content: 
            'application/json':
              schema: 
                #$ref: '#/components/schemas/OfferResponse'
                type: object
        499:
          description: The server does not support the specified encryption algorithm.
components:
  parameters:
    requestorPublicKey:
      in: header
      name: X-Requestor-Public-Key
      schema:
        $ref: '#/components/schemas/PublicKey'
      required: true
      description: A public key. This public key is expected to be used both to identify and authenticate the requestor.
    encryptionAlgorithm:
      in: header
      name: X-Encryption-Algorithm
      schema:
        type: string
        default: RSA
      description: The encryption algorithm that the requestor public key is for.
    serverPublicKey:
      in: header
      name: X-Server-Public-Key
      required: true
      schema:
        $ref: '#/components/schemas/PublicKey'
      description: A public key for which the server is expected to have the matching private key.
    randomValue:
      in: header
      name: X-Random-Value
      required: true
      schema:
        type: string
        format: binary
        minLength: 15
        maxLength: 25
      description: A random value.
  schemas:
    PublicKey:
      type: string
      format: binary
    KeyInfo:
      type: object
      properties:
        messageContext:
          type: string
          description: The value of this identifies a context in which the encrypted text that the key is for exists. It may be a blockchain transaction ID, record id or an other appropriate identifier. This information is needed to identify a key that is of interest.
        messageSubcontext:
          type: string
          description: The value of this identifies a sub-context such as a field in which the encrypted text that the key is for exists. It may be a field name, column name or an other appropriate identifier of something that is present in the given message context.
        shardNumber:
          type: array
          items:
            type: integer
      required:
        - messageContext